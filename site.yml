---
- name: Clean up existing configurations
  hosts: servers
  become: true
  gather_facts: false
  tasks:
    - name: Stop nginx if running
      systemd:
        name: nginx
        state: stopped
      ignore_errors: true

    - name: Remove nginx package
      apt:
        name: nginx
        state: absent
        purge: true
      ignore_errors: true

    - name: Remove nginx configuration directories
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/nginx
        - /var/log/nginx
        - /var/www/html
      ignore_errors: true

    - name: Remove existing SSL certificates
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/letsencrypt
        - /etc/ssl/certs/localhost.crt
        - /etc/ssl/private/localhost.key
      ignore_errors: true

    - name: Remove nginx systemd files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/systemd/system/nginx.service
        - /lib/systemd/system/nginx.service
      ignore_errors: true

    - name: Reload systemd daemon
      systemd:
        daemon_reload: true

    - name: Update package cache
      apt:
        update_cache: true
        cache_valid_time: 3600

    - name: Force reinstall nginx
      apt:
        name: nginx
        state: present
        force: true
        install_recommends: true
        allow_downgrade: true
        allow_change_held_packages: true

    - name: Stop nginx service after installation
      systemd:
        name: nginx
        state: stopped
        enabled: false
      ignore_errors: true

    - name: Create nginx configuration directory
      file:
        path: /etc/nginx
        state: directory
        mode: '0755'

    - name: Create basic nginx.conf
      copy:
        content: |
          user www-data;
          worker_processes auto;
          pid /run/nginx.pid;
          include /etc/nginx/modules-enabled/*.conf;

          events {
              worker_connections 768;
          }

          http {
              sendfile on;
              tcp_nopush on;
              types_hash_max_size 2048;
              include /etc/nginx/mime.types;
              default_type application/octet-stream;
              access_log /var/log/nginx/access.log;
              error_log /var/log/nginx/error.log;
              gzip on;
              include /etc/nginx/conf.d/*.conf;
              include /etc/nginx/sites-enabled/*;
          }
        dest: /etc/nginx/nginx.conf
        mode: '0644'

    - name: Create nginx directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - /etc/nginx/conf.d
        - /etc/nginx/sites-available
        - /etc/nginx/sites-enabled
        - /var/log/nginx
        - /etc/nginx/modules-enabled

    - name: Copy nginx mime.types from package files
      copy:
        src: /usr/share/nginx/mime.types
        dest: /etc/nginx/mime.types
        mode: '0644'
        remote_src: true
      ignore_errors: true
      register: nginx_copy_mime

    - name: Create mime.types if not found
      copy:
        content: |
          types {
              text/html                             html htm shtml;
              text/css                              css;
              text/xml                              xml;
              image/gif                             gif;
              image/jpeg                            jpeg jpg;
              application/javascript                js;
              application/atom+xml                  atom;
              application/rss+xml                   rss;
              text/plain                            txt;
              image/png                             png;
              image/svg+xml                         svg svgz;
              image/webp                            webp;
              application/json                      json;
              application/pdf                       pdf;
              application/zip                       zip;
              application/octet-stream              bin exe dll;
              application/octet-stream              deb;
              application/octet-stream              dmg;
              application/octet-stream              iso img;
              application/octet-stream              msi msp msm;
          }
        dest: /etc/nginx/mime.types
        mode: '0644'
      when: nginx_copy_mime.failed | default(false)

- name: Display all variables at start
  hosts: servers
  gather_facts: false
  tasks:
    - name: Log all important variables
      debug:
        msg:
          - "=== DEPLOYMENT CONFIGURATION ==="
          - "Domain: {{ indexer_domain }}"
          - "Admin Email: {{ admin_email }}"
          - "ClickHouse Password: {{ clickhouse_password }}"
          - "Grafana Admin Password: {{ grafana_admin_password }}"
          - "Certbot Method: {{ certbot_create_method }}"
          - "Certbot Extra Args: {{ certbot_create_extra_args }}"
          - "Skip SSL for localhost: {{ skip_ssl_for_localhost }}"
          - "Nginx Port: {{ nginx_port }}"
          - "================================="

- name: Configure all servers with common setup
  hosts: servers
  become: true
  roles:
    - common

- name: Configure SSL certificates
  hosts: nginx_servers
  become: true
  roles:
    - certs

- name: Configure nginx load balancers
  hosts: nginx_servers
  become: true
  roles:
    - nginx

- name: Configure ClickHouse servers
  hosts: clickhouse_servers
  become: true
  roles:
    - clickhouse

- name: Configure Prometheus servers
  hosts: prometheus_servers
  become: true
  roles:
    - prometheus

- name: Configure Grafana servers
  hosts: grafana_servers
  become: true
  roles:
    - grafana