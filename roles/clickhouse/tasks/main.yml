---
- name: Add ClickHouse GPG key
  apt_key:
    url: https://packages.clickhouse.com/rpm/lts/repodata/repomd.xml.key
    keyring: /usr/share/keyrings/clickhouse-keyring.gpg
    state: present
  become: yes

- name: Add ClickHouse repository
  apt_repository:
    repo: "deb [signed-by=/usr/share/keyrings/clickhouse-keyring.gpg] https://packages.clickhouse.com/deb stable main"
    state: present
    filename: clickhouse
  become: yes

- name: Update apt cache
  apt:
    update_cache: yes
  become: yes

- name: Install ClickHouse packages
  apt:
    name:
      - clickhouse-server
      - clickhouse-client
    state: present
  become: yes

- name: Create ClickHouse directories
  file:
    path: "{{ item }}"
    state: directory
    owner: clickhouse
    group: clickhouse
    mode: '0755'
  loop:
    - "{{ clickhouse_data_dir }}"
    - "{{ clickhouse_log_dir }}"
    - /etc/clickhouse-server/config.d
    - /etc/clickhouse-server/users.d
  become: yes

- name: Configure ClickHouse server
  template:
    src: config.xml.j2
    dest: /etc/clickhouse-server/config.d/custom.xml
    owner: clickhouse
    group: clickhouse
    mode: '0644'
  become: yes
  notify: restart clickhouse

- name: Configure firewall for ClickHouse HTTP port
  ufw:
    rule: allow
    port: "{{ clickhouse_http_port }}"
    proto: tcp
  become: yes

- name: Configure firewall for ClickHouse TCP port
  ufw:
    rule: allow
    port: "{{ clickhouse_tcp_port }}"
    proto: tcp
  become: yes

- name: Start and enable ClickHouse
  systemd:
    name: clickhouse-server
    state: started
    enabled: yes
  become: yes

- name: Check ClickHouse service status
  systemd:
    name: clickhouse-server
  register: clickhouse_status
  become: yes

- name: Debug ClickHouse service status
  debug:
    var: clickhouse_status

- name: Check ClickHouse logs if service is not running
  shell: journalctl -u clickhouse-server --no-pager -n 20
  register: clickhouse_logs
  become: yes
  when: clickhouse_status.status.ActiveState != "active"

- name: Display ClickHouse logs
  debug:
    var: clickhouse_logs.stdout_lines
  when: clickhouse_status.status.ActiveState != "active"

- name: Wait for ClickHouse to be ready
  wait_for:
    port: "{{ clickhouse_http_port }}"
    host: localhost
    delay: 5
    timeout: 60
  become: yes

- name: Create ericore database
  shell: |
    echo "CREATE DATABASE IF NOT EXISTS {{ clickhouse_database_name }};" | clickhouse-client
  become: yes
  ignore_errors: yes

- name: Remove any problematic user configuration files
  shell: |
    rm -f /etc/clickhouse-server/users.d/ericore.xml
  become: yes
  ignore_errors: yes

- name: Restart ClickHouse to clear any config issues
  systemd:
    name: clickhouse-server
    state: restarted
  become: yes
  ignore_errors: yes

- name: Wait a bit for ClickHouse to fully start
  pause:
    seconds: 10

- name: Create ericore user using SQL (after ClickHouse is stable)
  shell: |
    echo "CREATE USER IF NOT EXISTS ericore IDENTIFIED BY '{{ clickhouse_password }}';" | clickhouse-client --user=default
  become: yes
  ignore_errors: yes
  register: create_user_result

- name: Grant database permissions to ericore user
  shell: |
    echo "GRANT CREATE, SELECT, INSERT, UPDATE, DELETE, DROP, ALTER ON {{ clickhouse_database_name }}.* TO ericore;" | clickhouse-client --user=default
  become: yes
  ignore_errors: yes
  when: create_user_result.rc is defined and create_user_result.rc == 0