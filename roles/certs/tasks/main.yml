---
- name: Install nginx first (if not already installed)
  apt:
    name: nginx
    state: present
  become: true
  ignore_errors: true

- name: Ensure nginx configuration directory exists
  file:
    path: /etc/nginx
    state: directory
    mode: '0755'
  become: true

- name: Create basic nginx.conf if missing
  copy:
    content: |
      user www-data;
      worker_processes auto;
      pid /run/nginx.pid;
      error_log /var/log/nginx/error.log;
      include /etc/nginx/modules-enabled/*.conf;

      events {
          worker_connections 768;
      }

      http {
          sendfile on;
          tcp_nopush on;
          types_hash_max_size 2048;

          include /etc/nginx/mime.types;
          default_type application/octet-stream;

          ssl_protocols TLSv1.2 TLSv1.3;
          ssl_prefer_server_ciphers off;

          access_log /var/log/nginx/access.log;

          gzip on;

          include /etc/nginx/conf.d/*.conf;
          include /etc/nginx/sites-enabled/*;
      }
    dest: /etc/nginx/nginx.conf
    mode: '0644'
    force: no
  become: true

- name: Install certbot and dependencies
  apt:
    name:
      - certbot
      - python3-certbot-nginx
      - openssl
    state: present
    update_cache: yes
  become: true

- name: Check if certificate already exists (Let's Encrypt)
  stat:
    path: "/etc/letsencrypt/live/{{ certbot_certs[0].domains[0] }}/cert.pem"
  register: cert_exists
  become: true
  when: not (skip_ssl_for_localhost and certbot_certs[0].domains[0] == 'localhost')

- name: Check if self-signed certificate exists (for localhost)
  stat:
    path: "/etc/ssl/certs/{{ certbot_certs[0].domains[0] }}.crt"
  register: self_signed_cert_exists
  become: true
  when: skip_ssl_for_localhost and certbot_certs[0].domains[0] == 'localhost'

- name: Create self-signed certificate directory
  file:
    path: "/etc/ssl/private"
    state: directory
    mode: '0700'
  become: true
  when: 
    - skip_ssl_for_localhost and certbot_certs[0].domains[0] == 'localhost'
    - not (self_signed_cert_exists.stat.exists | default(false))

- name: Generate self-signed certificate for localhost
  command: >
    openssl req -x509 -nodes -days 365 -newkey rsa:2048
    -keyout /etc/ssl/private/{{ certbot_certs[0].domains[0] }}.key
    -out /etc/ssl/certs/{{ certbot_certs[0].domains[0] }}.crt
    -subj "/C=US/ST=Local/L=Local/O=Local/CN={{ certbot_certs[0].domains[0] }}"
  become: true
  when:
    - skip_ssl_for_localhost and certbot_certs[0].domains[0] == 'localhost'
    - not (self_signed_cert_exists.stat.exists | default(false))

- name: Stop nginx for standalone cert generation
  systemd:
    name: nginx
    state: stopped
  become: true
  when: 
    - certbot_create_method == 'standalone'
    - not (cert_exists.stat.exists | default(false))
    - not (skip_ssl_for_localhost and certbot_certs[0].domains[0] == 'localhost')

- name: Generate certificate using standalone
  command: >
    certbot certonly
    --standalone
    --noninteractive
    --agree-tos
    --email {{ certbot_admin_email }}
    {% for domain in certbot_certs[0].domains %}
    -d {{ domain }}
    {% endfor %}
    {{ certbot_create_extra_args }}
  become: true
  when:
    - certbot_create_method == 'standalone'
    - not (cert_exists.stat.exists | default(false))
    - not (skip_ssl_for_localhost and certbot_certs[0].domains[0] == 'localhost')

- name: Generate certificate using nginx
  command: >
    certbot certonly
    --nginx
    --noninteractive
    --agree-tos
    --email {{ certbot_admin_email }}
    {% for domain in certbot_certs[0].domains %}
    -d {{ domain }}
    {% endfor %}
    {{ certbot_create_extra_args }}
  become: true
  when:
    - certbot_create_method == 'nginx'
    - not (cert_exists.stat.exists | default(false))
    - not (skip_ssl_for_localhost and certbot_certs[0].domains[0] == 'localhost')

- name: Start nginx after standalone cert generation
  systemd:
    name: nginx
    state: started
  become: true
  when: 
    - certbot_create_method == 'standalone'
    - not (cert_exists.stat.exists | default(false))
    - not (skip_ssl_for_localhost and certbot_certs[0].domains[0] == 'localhost')

- name: Create renewal hook directory
  file:
    path: /etc/letsencrypt/renewal-hooks/post
    state: directory
    mode: '0755'
  become: true

- name: Create nginx reload hook
  copy:
    content: |
      #!/bin/bash
      systemctl reload nginx
    dest: /etc/letsencrypt/renewal-hooks/post/nginx-reload
    mode: '0755'
  become: true

- name: Set up automatic renewal cron job
  cron:
    name: "Certbot renewal"
    user: "{{ certbot_auto_renew_user }}"
    hour: "{{ certbot_auto_renew_hour }}"
    minute: "{{ certbot_auto_renew_minute }}"
    job: "certbot renew --quiet"
  become: true
  when: certbot_auto_renew

- name: Test certificate renewal
  command: certbot renew --dry-run
  become: true
  register: renewal_test
  changed_when: false