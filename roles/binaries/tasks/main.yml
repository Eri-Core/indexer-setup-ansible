---
- name: Create users for custom binaries
  user:
    name: "{{ item.user }}"
    system: yes
    shell: /bin/false
    home: "{{ item.working_dir }}"
    createhome: no
  loop: "{{ custom_binaries }}"
  become: yes

- name: Create working directories
  file:
    path: "{{ item.working_dir }}"
    state: directory
    owner: "{{ item.user }}"
    group: "{{ item.group }}"
    mode: '0755'
  loop: "{{ custom_binaries }}"
  become: yes

- name: Create config directories
  file:
    path: "{{ item.1.config_file | dirname }}"
    state: directory
    owner: "{{ item.0.user }}"
    group: "{{ item.0.group }}"
    mode: '0755'
  loop: "{{ custom_binaries | subelements('instances') }}"
  become: yes

- name: Download custom binaries
  get_url:
    url: "{{ item.url }}"
    dest: "{{ item.working_dir }}/{{ item.name }}"
    owner: "{{ item.user }}"
    group: "{{ item.group }}"
    mode: '0755'
  loop: "{{ custom_binaries }}"
  become: yes

- name: Create systemd service files for each instance
  template:
    src: service.j2
    dest: "/etc/systemd/system/{{ item.1.name }}.service"
    mode: '0644'
  loop: "{{ custom_binaries | subelements('instances') }}"
  become: yes
  notify:
    - daemon reload
    - restart services

- name: Create configuration files for each instance
  template:
    src: config.j2
    dest: "{{ item.1.config_file }}"
    owner: "{{ item.0.user }}"
    group: "{{ item.0.group }}"
    mode: '0644'
  loop: "{{ custom_binaries | subelements('instances') }}"
  become: yes
  notify: restart services

- name: Configure firewall for custom binary ports
  ufw:
    rule: allow
    port: "{{ item.1.port }}"
    proto: tcp
  loop: "{{ custom_binaries | subelements('instances') }}"
  become: yes

- name: Start and enable services
  systemd:
    name: "{{ item.1.name }}"
    state: started
    enabled: yes
    daemon_reload: yes
  loop: "{{ custom_binaries | subelements('instances') }}"
  become: yes